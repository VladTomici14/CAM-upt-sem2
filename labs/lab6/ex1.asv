% ----------------
% ----- EX 1 -----
% ----------------

% ----- a) -----
f = @(x) x.^2 - 3 - sin(x) - sqrt(abs(x));
x0 = 1;
x_a = fzero(f, x0);

fprintf('Solution for (a): x = %.6f\n', x_a);

% ----- b) -----
g = @(x) exp(-x.^3) - log(1 - x + x.^2/3);
dg = @(x) -3*x.^2.*exp(-x.^3) - (1 - (2/3)*x)./(1 - x + x.^2/3); % Derivative

x = -3;
tol = 1e-6;
max_iter = 1000;
iter = 0;

while true
    x_new = x - g(x)/dg(x);
    iter = iter + 1;
    if abs(x_new - x) < tol || iter > max_iter
        break
    end
    x = x_new;
end

fprintf('Solution for (b): x = %.6f after %d iterations\n', x_new, iter);


% ----- c) -----
h = @(x) 2.^(-sin(x)) + 4 - x.*log(x);

% ----- checking values -----
disp(['h(3.1) = ', num2str(h(3.1))]);
disp(['h(5) = ', num2str(h(5))]);

% ----- solving -----
x_c = fzero(h, [3.1 5]);

fprintf('Solution for (c): x = %.6f\n', x_c);


% ----- d) -----
p = @(x) (x-3).^2 + 5 - cos(abs(x));

% ----- plotting for inspecting the behavior -----
figure;
fplot(p, [-5, 5]); 
grid on;
xlabel('x');
ylabel('p(x)');
title('Plot of p(x) to check for possible roots');

% ----- checking function values at interval ends -----
p2 = p(2);
p4 = p(4);

fprintf('p(2) = %.6f\n', p2);
fprintf('p(4) = %.6f\n', p4);

% ----- trying to solve only if a sign change occurs
if sign(p2) ~= sign(p4)
    x_d = fzero(p, [2, 4]);
    fprintf('Solution for (d): x = %.6f\n', x_d);
else
    disp('No solution found in [2, 4]: p(x) does not change sign. Therefore, no root exists.');
end